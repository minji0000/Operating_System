# Chapter 1. 서론

## ***1.1 운영체제가 할 일***

운영체제는 컴퓨터 하드웨어를 관리하는 소프트웨어이다.                                                                                                     또한 응용 프로그램을 위한 기반을 제공하며 사용자와 하드웨어 사이에서 중재자 역할을 수행한다. 

### ***1.1.2 시스템 관점***

운영체제는 하드웨어와 가장 밀접하게 연관된 프로그램이며, 따라서 우리는 운영체제를 **자원 할당자**로 볼 수 있다.

컴퓨터 시스템은 문제를 해결하기 위해 요구되는 여러 가지 자원들(소프트웨어와 하드웨어), 즉 CPU 시간, 메모리 공간, 저장장치 공간, 입출력 장치 등을 가진다. 운영체제는 이들 자원의 관리자로서 동작한다. 자원에 대해 서로 상충할 수도 있는 많은 요청이 있으므로, 운영체제는 컴퓨터 시스템을 효율적이고 공정하게 운영할 수 있도록 어느 요청에 자원을 할당할지를 결정해야 한다.

### ***1.1.3 운영체제 정의***

운영체제에는 항상 실행 중인 **커널**, 응용 프로그램 개발을 쉽게 하고 기능을 제공하는 **미들웨어** 프레임워크 및         시스템 실행 중에 시스템을 관리하는 데 도움이 되는 **시스템 프로그램**이 포함된다.

* **커널이란**: Linux® 커널은 Linux 운영 체제(OS)의 주요 구성 요소이며 컴퓨터 하드웨어와 프로세스를 잇는           핵심 인터페이스입니다. 

**커널의 기능**

1. 메모리 관리: 메모리가 어디에서 무엇을 저장하는 데 얼마나 사용되는지를 추적합니다.                                       
2. 프로세스 관리: 어느 프로세스가 중앙 처리 장치(CPU)를 언제 얼마나 오랫동안 사용할지를 결정합니다.
3. 장치 드라이버: 하드웨어와 프로세스 사이에서 중재자/인터프리터의 역할을 수행합니다.
4. 시스템 호출 및 보안: 프로세스의 서비스 요청을 수신합니다.

* **미들웨어**: 응용 프로그램 개발자에게 추가 서비스를 제공하는 일련의 소프트웨어 프레임워크

- 컴퓨터 제작 회사가 사용자의 특정한 요구대로 만들어 제공하는 프로그램으로, 운영 체제와 응용 소프트웨어의 중간에서 조정과 중개의 역할을 수행하는 소프트웨어

**왜 운영체제를 공부하는가?**

단순히 거의 모든 코드가 운영체제 위에서 실행되므로 운영체제 작동방식에 대한 지식은 적절하고 효율적이며 효과적이고 안전한 프로그래밍에 중요하기 때문이다. 

## ***1.2 컴퓨터 시스템의 구성***

### ***1.2.1 인터럽트***

하드웨어는 어느 순간이든 시스템 버스를 통해 CPU에 신호를 보내 인터럽트를 발생시킬 수 있다. 인터럽트는 다른 많은 목적으로도 사용되며 운영체제와 하드웨어의 상호 작용 방식의 핵심 부분이다. 

*** 인터럽트**(**interrupt**): 마이크로프로세서(CPU)가 프로그램을 실행하고 있을 때, 입출력 하드웨어 등의 장치에 예외상황이 발생하여 처리가 필요할 경우에 마이크로프로세서에게 알려 처리할 수 있도록 하는 것을 말한다.

**인터럽트 과정**

1. 기존의 작업을 처리하던 도중, 인터럽트가 발생하면
2. 현재 컴퓨터가 처리하는 일을 중지하고 현재의 컴퓨터의 상태(CPU 내부의 레지스터, 메인 메모리 내용 등을) 저장한다.
3. 해당하는 인터럽트를 처리해주기 위한 인터럽트 서비스 루틴을 처리한다.
4. 인터럽트 처리 이후 저장되었던 이전 작업의 상태를 복구하고 이전 작업 수행을 재개한다.

인터럽트 **우선순위 레벨**을 통해 CPU는 모든 인터럽트를 마스킹하지 않고도 우선순위가 낮은 인터럽트 처리를 연기할 수 있고, 우선순위가 높은 인터럽트가 우선순위가 낮은 인터럽트의 실행을 선점할 수 있다. 

**인터럽트 우선순위 레벨**

1. 전원 공급의 이상
2. CPU의 기계적인 오류
3. 외부 신호에 의한 인터럽트
4. 입출력 전송 요청 및 전송 완료, 전송 오류
5. 프로그램 검사 인터럽트
6. 수퍼바이저 호출(SVC 인터럽트)

**인터럽트 종류**

- 외부 인터럽트: 입출력 장치, 타이밍 장치, 전원 등의 외부적인 요인에 의해서 발생하는 인터럽트.
    - 전원 이상 인터럽트: 정전이나 전원이 이상이 있는 경우
    - 기계 고장 인터럽트: [CPU](https://namu.wiki/w/CPU)등의 기능적인 동작 오류가 발생한 경우
    - 입출력 인터럽트(I/O Interrupt): 입출력의 종료 등의 이유로 CPU의 수행을 요청하는 인터럽트.
- 내부 인터럽트: 잘못된 명령이나 데이터를 사용할 때 발생하는 인터럽트
    - [0으로 나누는 경우](https://namu.wiki/w/0%EC%9C%BC%EB%A1%9C%20%EB%82%98%EB%88%84%EA%B8%B0)
    - 오버플로우 또는 언더플로우가 발생한 경우
    - 프로그램 상의 오류[[4]](https://namu.wiki/w/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8#fn-4)
    - 프로그램에서 함수 등 명령어를 잘못 사용한 경우
    - 소프트웨어 인터럽트: [CPU](https://namu.wiki/w/CPU)가 인스트럭션을 수행하는 도중에 일어나는 인터럽트[[5]](https://namu.wiki/w/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8#fn-5)

인터럽트는 최신 운영체에서 비동기 이벤트를 처리하기 위해 사용되며,                                                                         장치 컨트롤러 및 하드웨어 오류로 인해 발생한다.

* 비동기 이벤트:  어떠한 작업이 동시에 일어날 수 있는 개념이며, 요청과 결과 반환이 동시에 일어나지 않는다.               비동기방식 설계는 병렬적으로 작업을 진행하기 때문에 효율적이지만, 설계가 복잡한 단점이 있다.

* 동기 이벤트: 어떠한 작업이 순차적으로 실행되는 개념이며, 요청을 하면 결과가 반환되는 것을 기다려야 한다.       동기방식 설계는 매우 직관적이지만, 결과 반환까지 대기해야 하는 시간비효율적인 단점이 있다.